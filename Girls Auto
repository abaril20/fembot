/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

        import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
        import com.qualcomm.robotcore.eventloop.opmode.Disabled;
        import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
        import com.qualcomm.robotcore.hardware.DcMotor;
//import com.qualcomm.robotcore.hardware.Gyroscope;
//import com.qualcomm.robotcore.hardware.IntegratingGyroscope;
        import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cGyro;
        import com.qualcomm.robotcore.hardware.DcMotorSimple;
        import com.qualcomm.robotcore.util.Range;


        import com.qualcomm.robotcore.hardware.Servo;
        import com.qualcomm.robotcore.util.ElapsedTime;

/**
 * This file illustrates the concept of driving a path based on time.
 * It uses the common Pushbot hardware class to define the drive on the robot.
 * The code is structured as a LinearOpMode
 *
 * The code assumes that you do NOT have encoders on the wheels,
 *   otherwise you would use: PushbotAutoDriveByEncoder;
 *
 *   The desired path in this example is:
 *   - Drive forward for 3 seconds
 *   - Spin right for 1.3 seconds
 *   - Drive Backwards for 1 Second
 *   - Stop and close the claw.
 *
 *  The code is written in a simple form with no optimizations.
 *  However, there are several ways that this type of sequence could be streamlined,
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="Girls Auto", group="Pushbot")
@Disabled
public class GirlsAuto extends LinearOpMode {

    /* Declare OpMode members. */
    /* Public OpMode members. */
//    public DcMotor motorOne   = null;
//    public DcMotor  motorTwo = null;
//    public DcMotor  motorThree = null;
//    public DcMotor  motorFour = null;
    public DcMotor  armMotor = null;
    public ModernRoboticsI2cGyro gyro = null;
    public Servo rightGrip = null;
    public Servo leftGrip = null;
    //    public Servo slider    = null;
    private ElapsedTime     runtime = new ElapsedTime();


    static final double     FORWARD_SPEED = 0.6;
    static final double     TURN_SPEED    = 0.5;

    @Override
    public void runOpMode() {

        /*
         * Initialize the drive system variables.
         * The init() method of the hardware class does all the work here
         */
        // Define and Initialize Motors
//        armMotor  = hardwareMap.get(DcMotor.class, "am");
//        motorOne = hardwareMap.get(DcMotor.class, "m1");
//        motorTwo = hardwareMap.get(DcMotor.class, "m2");
//        motorThree = hardwareMap.get(DcMotor.class, "m3");
//        motorFour = hardwareMap.get(DcMotor.class, "m4");
//        slider = hardwareMap.get(Servo.class, "s");
        gyro = hardwareMap.get(ModernRoboticsI2cGyro.class, "gyro");
        frontLeft = hardwareMap.get(DcMotor.class, "fl");
        frontRight = hardwareMap.get(DcMotor.class, "fr");
        backRight = hardwareMap.get(DcMotor.class, "br");
        backLeft = hardwareMap.get(DcMotor.class, "bl");
        armMotor = hardwareMap.get(DcMotor.class, "arm");
        rightGrip = hardwareMap.get(Servo.class, "rg");
        leftGrip = hardwareMap.get(Servo.class, "lg");
        leftGrip.setDirection(Servo.Direction.REVERSE);
        frontLeft.setDirection(DcMotorSimple.Direction.REVERSE);

        // armMotor.setDirection(DcMotor.Direction.REVERSE);// Set to FORWARD if using AndyMark motors

        // Send telemetry message to signify robot waiting;
//        telemetry.addData("Status", "Ready to run");    //
//        telemetry.update();

        // Wait for the game to start (driver presses PLAY)
//        waitForStart();

        // Step through each leg of the path, ensuring that the Auto mode has not been stopped along the way

        // Step 1:  protocol: lowering
//        armMotor.setPower(.5);
//        sleep(1200);
//        armMotor.setPower(0);

        //Step 2: protocol: strafe
        // motor 1 counterclockwise
//        motorOne.setPower(-.5);
        //motor 2 counterclockwise
//        motorTwo.setPower(-.5);
        //motor 3 clockwise
//        motorThree.setPower(.5);
        //motor4 clockwise
//        motorFour.setPower(.5);
//        sleep(500);
//        motorOne.setPower(0);
//        motorTwo.setPower(0);
//        motorThree.setPower(0);
//        motorFour.setPower(0);

        //Step 3: protocol: lower arm
//        armMotor.setPower(-.5);
//        sleep(1200);
//        armMotor.setPower(0);

        //Step 4: protocol: drive to depot
        // motor 1 counterclockwise
//        motorOne.setPower(-.5);
        //motor 2 clockwise
//        motorTwo.setPower(.5);
        //motor 3 clockwise
//        motorThree.setPower(.5);
        //motor4 counterclockwise
//        motorFour.setPower(-.5);
//        sleep(3000);
//        motorOne.setPower(0);
//        motorTwo.setPower(0);
//        motorThree.setPower(0);
//        motorFour.setPower(0);

        //Step 5: protocol: claim depot
//        slider.setPosition(.3);


//        telemetry.addData("Path", "Complete");
//        telemetry.update();
//        sleep(1000);
    }
    /* https://first.wpi.edu/FRC/roborio/beta/docs/java/edu/wpi/first/wpilibj/AnalogGyro.html
     need to import public class analogGyro
    */

    public void turnDegrees(ModernRoboticsI2cGyro gyro, int degrees){
        gyro.calibrate();
        while(Math.abs(degrees - gyro.getHeading()) > 2)
        {
            if(gyro.getHeading() < degrees)
            {

                backLeft.setPower(.5);
                frontLeft.setPower(.5);

                backRight.setPower(-.5);
                frontRight.setPower(-.5);
            }
            else{

                backLeft.setPower(-.5);
                frontLeft.setPower(-.5);

                backRight.setPower(.5);
                frontRight.setPower(.5);
            }
        }
        backLeft.setPower(0);
        frontLeft.setPower(0);

        backRight.setPower(0);
        frontRight.setPower(0);

    }

    /*    public void driveInches(DcMotor left, DcMotor right, double inches, double circumference){
            int ticks = (int)(7*inches/circumference);
            if (ticks == 0)
                return;
            // reset encoder count kept by left motor.
            left.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
    
            // set left motor to run to target encoder position and stop with brakes on.
            left.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            left.setTargetPosition(ticks);
            left.setPower(0.5 * (Math.abs(ticks)/ticks));
            right.setPower(0.5 * (Math.abs(ticks)/ticks));
            while (opModeIsActive() && left.isBusy())
            {
            }
            left.setPower(0);
            right.setPower(0);
            left.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
        }*/
    static final double     COUNTS_PER_MOTOR_REV    = 1440 ;
    static final double     DRIVE_GEAR_REDUCTION    = 2.0 ;
    static final double     WHEEL_DIAMETER_INCHES   = 5.0 ;
    static final double     COUNTS_PER_INCH         = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
            (WHEEL_DIAMETER_INCHES * 3.1415);
    static final double     HEADING_THRESHOLD       = 1 ;
    static final double     P_TURN_COEFF            = 0.1;
    static final double     DRIVE_SPEED             = 0.3;
//    static final double     TURN_SPEED              = 0.0;
    static final double     P_DRIVE_COEFF           = 0.4;
    static DcMotor frontLeft = null;
    static DcMotor frontRight = null;
    static DcMotor backLeft = null;
    static DcMotor backRight = null;

    public void gyrostraight()  {

        frontLeft.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        frontRight.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        gyro.resetZAxisIntegrator();

        while(gyro.isCalibrating()) {
            sleep(50);
        }
        gyro.resetZAxisIntegrator();

        gyroDrive(DRIVE_SPEED, -24.0, 0.0);
        gyroHold(TURN_SPEED, 0.0, 0.5);
    }

    public void gyroDrive ( double speed,
                            double distance,
                            double angle) {

        int     newLeftTarget;
        int     newRightTarget;
        int     moveCounts;
        double  max;
        double  error;
        double  steer;
        double  leftSpeed;
        double  rightSpeed;

        if (opModeIsActive()) {

            // Determine new target position
            moveCounts = (int)(distance * COUNTS_PER_INCH);
            newLeftTarget = frontLeft.getCurrentPosition() + moveCounts;
            newRightTarget = frontRight.getCurrentPosition() + moveCounts;

            frontLeft.setTargetPosition(newLeftTarget);
            frontRight.setTargetPosition(newRightTarget);

            frontRight.setMode(DcMotor.RunMode.RUN_TO_POSITION);
            frontLeft.setMode(DcMotor.RunMode.RUN_TO_POSITION);

            // start motion.
            speed = Range.clip(Math.abs(speed), 0.0, 1.0);
            backRight.setPower(speed);
            frontRight.setPower(speed);
            backLeft.setPower(speed);
            frontLeft.setPower(speed);

            while (opModeIsActive() && (frontLeft.isBusy() && frontRight.isBusy())) {

                error = getError(angle);
                steer = getSteer(error, P_DRIVE_COEFF);

                if (distance < 0)
                    steer *= -1.0;

                leftSpeed = speed - steer;
                rightSpeed = speed + steer;

                max = Math.max(Math.abs(leftSpeed), Math.abs(rightSpeed));
                if (max > 1.0)
                {
                    leftSpeed /= max;
                    rightSpeed /= max;
                }
                backRight.setPower(rightSpeed);
                frontRight.setPower(rightSpeed);
                backLeft.setPower(leftSpeed);
                frontLeft.setPower(leftSpeed);
            }

            backLeft.setPower(0);
            frontLeft.setPower(0);
            backRight.setPower(0);
            frontRight.setPower(0);

            frontLeft.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
            frontRight.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        }
    }


    public void gyroHold( double speed, double angle, double holdTime) {

        ElapsedTime holdTimer = new ElapsedTime();

        holdTimer.reset();
        while (opModeIsActive() && (holdTimer.time() < holdTime)) {
            // Update telemetry & Allow time for other processes to run.
            onHeading(speed, angle, P_TURN_COEFF);
            telemetry.update();
        }
        backLeft.setPower(0);
        frontLeft.setPower(0);
        backRight.setPower(0);
        frontRight.setPower(0);
    }

    boolean onHeading(double speed, double angle, double PCoeff) {
        double   error ;
        double   steer ;
        boolean  onTarget = false ;
        double leftSpeed;
        double rightSpeed;

        error = getError(angle);

        if (Math.abs(error) <= HEADING_THRESHOLD) {
            steer = 0.0;
            leftSpeed  = 0.0;
            rightSpeed = 0.0;
            onTarget = true;
        }
        else {
            steer = getSteer(error, PCoeff);
            rightSpeed  = speed * steer;
            leftSpeed   = -rightSpeed;
        }

        backRight.setPower(leftSpeed);
        frontRight.setPower(leftSpeed);
        backLeft.setPower(leftSpeed);
        frontLeft.setPower(rightSpeed);

        return onTarget;
    }

    public double getError(double targetAngle) {

        double robotError;

        robotError = targetAngle - gyro.getHeading();
        while (robotError > 180)  robotError -= 360;
        while (robotError <= -180) robotError += 360;
        return robotError;
    }

    public double getSteer(double error, double PCoeff) {
        return Range.clip(error * PCoeff, -1, 1);
    }

    public void closeGrip() {
        rightGrip.setPosition(0);
        leftGrip.setPosition(0);
    }
    public void openGrip(){
        rightGrip.setPosition(180);
        leftGrip.setPosition(180);
    }
    public void setGrip(int pos) {
        rightGrip.setPosition(pos);
        leftGrip.setPosition(pos);
    }

    double armPos = 0;
    double armMax = 100;//update when built
    public void setArm(double pos) {
        armMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        double changePos = pos - armPos;
        armPos = pos;
        armMotor.setTargetPosition(armMotor.getCurrentPosition() + (int) (changePos * armMax));
        if (armMotor.getTargetPosition() < armMotor.getCurrentPosition()) {
            armMotor.setPower(-1);
        }
        else {
            armMotor.setPower(1);
        }
        while(armMotor.isBusy());
        armMotor.setPower(0);
    }

}
